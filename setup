#!/bin/bash

OPTSTRING=":sgih"
USAGE="Usage: $0 [OPTIONS]
Run the ansible playbook defined by setup.yml with tags defined by the OPTIONS
given to this script.

OPTIONS:
  -s: include tags which require sudo permission.
  -g: include tags for installation of GUI tools.
  -i: include tags for installation of general tools.
  -h: display this help.
"

# Get options any command line flags. Note that we can pass each of the options
# multiple times, e.g. by passing flags -sssgggg, etc. Note that this doesn't
# have any effect, but we won't really try and disallow it.
while getopts ${OPTSTRING} OPT; do
  case ${OPT} in
    s)
      SUDO=true
      ;;
    g)
      GUI=true
      ;;
    i)
      INSTALL=true
      ;;
    h)
      echo "$USAGE"
      exit 0
      ;;
    ?)
      echo "$0: invalid option -${OPTARG}"
      echo
      echo "$USAGE"
      exit 1
      ;;
  esac
done

# Remove from $@ any of the args that have been parsed.
shift $((OPTIND-1))

# If $@/$* is not empty then we have positional args.
if [[ -n "$*" ]]; then
  echo "$0: invalid positional arguments '$*'"
  echo
  echo "$USAGE"
  exit 1
fi

# These arrays will contain flags that we will pass to the ansible-playbook
# command as well as any tags that we will skip.
FLAGS=()
SKIP_TAGS=()

# Get the system name.
UNAME=$(uname -s)

# If the sudo option is set then append a flag to ask for the become (e.g. sudo)
# password.
if [[ -n "$SUDO" ]]; then
  FLAGS+=('--ask-become-pass');
fi

# Add skip tags based on the system name, i.e. we'll skip all other systems. We
# don't really need to do this since ansible has been set up to check as well,
# but this saves time and logging since ansible will not even try the task
# (rather than trying and immediately skipping).
if [[ "$UNAME" == "Linux"  ]]; then SKIP_TAGS+=("mac"); fi
if [[ "$UNAME" == "Darwin" ]]; then SKIP_TAGS+=("linux"); fi

# If the following options are NOT set then add their corresponding tags to the
# SKIP_TAGS array.
if [[ -z "$SUDO"    ]]; then SKIP_TAGS+=('become'); fi
if [[ -z "$GUI"     ]]; then SKIP_TAGS+=('gui'); fi
if [[ -z "$INSTALL" ]]; then SKIP_TAGS+=('install'); fi

# Join the SKIP_TAGS array as comma-separated list.
SKIP_TAGS=$(IFS=,; echo "${SKIP_TAGS[*]}")

# If we have any tags to skip then add a flag specifying this; i.e. we ignore
# this step if we're not skipping any tags.
if [[ -n "$SKIP_TAGS" ]]; then
  FLAGS+=("--skip-tags ${SKIP_TAGS}")
fi

# Call the playbook command and echo it to the terminal.
set -x
ansible-playbook ${FLAGS[*]} setup.yml

