#!/bin/bash

set -eu

OPTSTRING=":sgpevnh"
USAGE="Usage: $0 [OPTIONS]
Run the ansible playbook defined by setup.yml with tags defined by the OPTIONS
given to this script.

OPTIONS:
  -s: include tags requiring sudo permission.
  -g: include tags for GUI setup.
  -p: include tags for package installation.
  -e: include tags for adding external packages.
  -v: be verbose.
  -n: do nothing; run checks (-C) in ansible.
  -h: display this help.
"

# Initialize our option variables. We'll test these with -n below but they have
# to be set because of the use of -u to catch unset variables.
SUDO=""
GUI=""
PACKAGE=""
EXTERNAL=""
VERBOSE=""
NOTHING=""

# Get options any command line flags. Note that we can pass each of the options
# multiple times, e.g. by passing flags -sssgggg, etc. Note that this doesn't
# have any effect, but we won't really try and disallow it.
while getopts ${OPTSTRING} OPT; do
  case ${OPT} in
    s) SUDO=true ;;
    g) GUI=true ;;
    p) PACKAGE=true ;;
    e) EXTERNAL=true ;;
    v) VERBOSE=true ;;
    n) NOTHING=true ;;
    h)
      echo "$USAGE"
      exit 0
      ;;
    ?)
      echo "$0: invalid option -${OPTARG}"
      echo
      echo "$USAGE"
      exit 1
      ;;
  esac
done

# Remove from $@ any of the args that have been parsed.
shift $((OPTIND-1))

# If $@/$* is not empty then we have positional args.
if [[ -n "$*" ]]; then
  echo "$0: invalid positional arguments '$*'"
  echo
  echo "$USAGE"
  exit 1
fi

# These arrays will contain flags that we will pass to the ansible-playbook
# command as well as any tags that we will skip.
FLAGS=()
SKIP_TAGS=()

# If the sudo option is set then append a flag to ask for the become (e.g. sudo)
# password.
if [[ -n "$SUDO" ]]; then
  FLAGS+=("--ask-become-pass");
fi

# Do nothing (if possible).
if [[ -n "$NOTHING" ]]; then
  FLAGS+=("-C");
fi

# Be verbose.
if [[ -n "$VERBOSE" ]]; then
  FLAGS+=("-v");
fi

# If the following options are NOT set then add their corresponding tags to the
# SKIP_TAGS array.
if [[ -z "$SUDO"     ]]; then SKIP_TAGS+=("become"); fi
if [[ -z "$GUI"      ]]; then SKIP_TAGS+=("gui"); fi
if [[ -z "$PACKAGE"  ]]; then SKIP_TAGS+=("package"); fi
if [[ -z "$EXTERNAL" ]]; then SKIP_TAGS+=("external"); fi

# Join the SKIP_TAGS array as comma-separated list.
SKIP_TAGS=$(IFS=,; echo "${SKIP_TAGS[*]}")

# If we have any tags to skip then add a flag specifying this; i.e. we ignore
# this step if we're not skipping any tags.
if [[ -n "$SKIP_TAGS" ]]; then
  FLAGS+=("--skip-tags ${SKIP_TAGS}")
fi

# Find the directory we're running from.
DIRNAME="$(dirname ${BASH_SOURCE[0]})"

# Find the directory we're running from.

# Call the playbook command and echo it to the terminal.
set -x
ANSIBLE_CONFIG="${DIRNAME}/ansible.cfg" \
  ansible-playbook ${FLAGS[*]} ${DIRNAME}/setup.yml

